name: Build and Deploy for Python service

on:
  workflow_dispatch:
    inputs:
      stagingCommitHash:
        description: "Commit hash to deploy"
        required: true
        default: ""

env:
  ACCOUNT_ID: 941614911918
  APP_NAME: web         
  CLUSTER_NAME: dont-pause
  ECR_REGISTRY: zop-dev
  NAMESPACE: workflow-test   
  REGION: ap-south-1

permissions:
  id-token: write
  contents: write

concurrency:
  group: ${{ github.workflow }}

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.filter.outputs.should_run }}
    steps:
      - name: Checkout specific commit with history
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.stagingCommitHash }}
          fetch-depth: 2  # Fetch at least 2 commits to get the parent

      - name: Check for changes in webapp
        id: filter
        run: |
          # Get the parent commit to compare
          PARENT=$(git rev-parse ${{ github.event.inputs.stagingCommitHash }}^ || echo "")
          if [ -n "$PARENT" ]; then
            CHANGED=$(git diff --name-only $PARENT ${{ github.event.inputs.stagingCommitHash }} | grep '^webapp/' || true)
          else
            # First commit edge case
            CHANGED=$(git ls-tree --name-only -r ${{ github.event.inputs.stagingCommitHash }} | grep '^webapp/' || true)
          fi

          if [ -n "$CHANGED" ]; then
            echo "Changes detected in webapp/"
            echo "should_run=true" >> "$GITHUB_OUTPUT"
          else
            echo "No relevant changes in webapp/"
            echo "should_run=false" >> "$GITHUB_OUTPUT"
          fi

  dockerize:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should_run == 'true'
    name: 🐳 Dockerize

    outputs:
      image: ${{ steps.output-image.outputs.image }}

    steps:
      - name: Checkout specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.stagingCommitHash }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR Private
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image to ECR
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./webapp
          file: ./webapp/Dockerfile
          tags: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.APP_NAME }}-${{ github.event.inputs.stagingCommitHash }}

      - id: output-image
        run: |
          echo "image=${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.APP_NAME }}-${{ github.event.inputs.stagingCommitHash }}" >> "$GITHUB_OUTPUT"

  deployment:
    runs-on: ubuntu-latest
    needs: dockerize
    if: needs.check-changes.outputs.should_run == 'true'
    name: 🚀 Deploy

    env:
      image: ${{ needs.dockerize.outputs.image }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ env.REGION }}

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update AWS Kubectl component
        run: aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Update Deployment Image
        run: |
          kubectl set image deployment/${{ env.APP_NAME }} \
          ${{ env.APP_NAME }}=${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.APP_NAME }}-${{ github.event.inputs.stagingCommitHash }} \
          --namespace ${{ env.NAMESPACE }}
